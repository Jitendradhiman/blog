{
  
    
        "post0": {
            "title": "Title",
            "content": "",
            "url": "https://jitendradhiman.github.io/blog/2020/08/20/Untitled.html",
            "relUrl": "/2020/08/20/Untitled.html",
            "date": " • Aug 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Binary logistic regression",
            "content": "# will run in python 2 import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline . Logistic regression (binary class) with 5-fold cross validation . We will use 5-fold cross validation | We will use cross entropy loss function with sigmoid nonlinearity | # load the data, you may need to cheange the path path_data = &#39;./mydata/FDB-ENS.XLSX&#39; #df = pd.read_excel(path_data,sheetname=&#39;quantum_ensemble_db&#39;) # read data using pandas library df = pd.read_excel(path_data) # read data using pandas library . df . #print(df) # print the data keys = [&#39;F1&#39;,&#39;F2&#39;,&#39;F3&#39;,&#39;F4&#39;,&#39;F5&#39;,&#39;Label&#39;] # this is the structure of the data in the file X1 = np.zeros([df.shape[0],1]) # there are (df.shape[0] =) 800 features in a 5-dimensional space # covert the data into numpy array for key in keys: X_temp = np.array(df[key]) X_temp.shape = (X_temp.shape[0],1) X1 = np.append(X1,X_temp,axis =1) X = X1[:,1:-1] # extract only the features (800 x 5), each row represents a feature vector Y = X1[:,-1:] # extract only labels, (800 x 1) print(&#39;training data-size = {},label data-size = {}&#39;.format(X.shape,Y.shape)) . training data-size = (800, 5),label data-size = (800, 1) . K = 5 # use 5-fold cross-validation fold_samples = int(X.shape[0]/K) # size of each fold # there are 800 features, each fold is of size 800/5 XX = [] # make a list, each element is a multi-dimensional array containing 160 features, total size of list is 5 YY = [] # corresponding labels, a list each element is (180 x 1) array, there are a total of 5 elements in the list i = 0 while (i&lt;=X.shape[0]-fold_samples): XX.append(X[i:i+fold_samples]) YY.append(Y[i:i+fold_samples]) i = i+fold_samples # sanity check : XX[0].shape, YY[0].shape, each element of the list is numpy array XX_Org = XX[:] # make a copy of data, python 2 way YY_Org = YY[:] . max_itr = 500 # maximum number of iterations for gradient descent alpha = 0.1 # helper functions def net_inputV2(theta,x): return np.dot(x,theta) def sigmoidV2(z): return 1.0/(1+np.exp(-z)) def gradientV2(theta,x,y): m= x.shape[0] # the total number of features grad = (1.0)/m*np.dot(x.T,sigmoidV2(net_inputV2(theta,x)).reshape(-1,1)-y.reshape(-1,1)) return grad def probabilityV2(theta,x): return sigmoidV2(net_inputV2(theta,x)) def cost_functionV2(theta,x,y): m = x.shape[0] total_cost = -(1.0/m) * np.sum(y * np.log(probabilityV2(theta,x))+(1-y)*np.log(1-probabilityV2(theta,x))) return total_cost def computeAccV2(theta,x,y): pred_y = 1*[sigmoidV2(net_inputV2(theta,x))&gt;0.5 for x in x] acc = np.mean(y==pred_y)*100.0 return acc . all_costs = [] # training loss all_acc = [] # accuracy on the test data all_val_costs = [] # validation loss # main logic here for i in range(K): # loop over the total number of folds XTest, YTest = XX[i], YY[i] XX.pop(i) # remove the current fold-data YY.pop(i) XTrain = XX # keep the data except the current fold YTrain = YY for i in range(len(XTrain)): if i==0: XTrainAll = XTrain[i] YTrainAll = YTrain[i] else: XTrainAll = np.vstack((XTrainAll,XTrain[i])) YTrainAll = np.vstack((YTrainAll,YTrain[i])) # train the model for the current fold and compute accuracy XTrainAll = np.insert(XTrainAll.astype(float),0,1,axis=1) XTest = np.insert(XTest.astype(float),0,1,axis=1) costs = np.zeros(max_itr) # training loss val_costs = np.zeros(max_itr) # validation loss theta = np.random.rand(XTrainAll.shape[1]).reshape(-1,1) # initialize weights(or model parameters) # optimize the model parameters using Gradient descent for epoch in range(max_itr): costs[epoch] = cost_functionV2(theta,XTrainAll,YTrainAll) # compute training loss val_costs[epoch] = cost_functionV2(theta,XTest,YTest) # compute validation loss #if np.remainder(epoch,50)==0: #print(&quot;The cost at iteration {}/{} is {}&quot;.format(epoch,max_itr,costs[epoch])) grad = gradientV2(theta,XTrainAll,YTrainAll) theta -=alpha*grad # weight update # compute accuracy on the test data acc = computeAccV2(theta,XTest,YTest) all_costs.append(costs) all_val_costs.append(val_costs) all_acc.append(acc) XX, YY = XX_Org[:], YY_Org[:] # retain original for the next fold, pop function modifies the data # overall accuracy: it is the mean of the accuracies for each fold acc_final = np.mean(all_acc) print(&#39;Accuracy mean = {}%, Accuracy variance = {}&#39;.format(acc_final,np.std(all_acc))) plt.figure(1) for i in range(len(all_val_costs)): plt.plot(all_val_costs[i],label=&#39;%s fold&#39; % (i+1)) plt.legend() plt.xlabel(&#39;#EPOCHS&#39;) plt.ylabel(&#39;VALIDATION LOSS&#39;) plt.show() plt.figure(2) for i in range(len(all_costs)): plt.plot(all_costs[i],label=&#39;%s fold&#39; % (i+1)) plt.legend() plt.xlabel(&#39;#EPOCHS&#39;) plt.ylabel(&#39;TRAINING LOSS&#39;) plt.show() . Accuracy mean = 78.75%, Accuracy variance = 1.81142209327 .",
            "url": "https://jitendradhiman.github.io/blog/jupyter/2020/07/21/BinaryLogisticRgression.html",
            "relUrl": "/jupyter/2020/07/21/BinaryLogisticRgression.html",
            "date": " • Jul 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jitendradhiman.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jitendradhiman.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jitendradhiman.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jitendradhiman.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}